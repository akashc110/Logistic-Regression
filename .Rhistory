PriceChange <- as.numeric(set1$Change)
#Make a dataframe of closing price and percent change
stockList <- data.frame(Symb, Closing_Price, PriceChange)
stockList <- stockList[order(stockList$Closing_Price), ]
train <- read.csv("C:/Users/akash/Downloads/Kaggle/Titanic Disaster Problem/train.csv")
test <- read.csv("C:/Users/akash/Downloads/Kaggle/Titanic Disaster Problem/test.csv")
table(train$Survived)
prop.table(table(train$Survived))
test$Survived <- rep(0,418)
submit <- data.frame(PassengerID = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "Allwilldie.csv",row.names = FALSE)
table(train$Sex)
prop.table(table(train$Sex, train$Survived),1)
test$Survived<-0
test$Survived[test$Sex == 'female'] <- 1
submit <- data.frame(PassengerID = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "Menwilldie.csv",row.names = FALSE)
summary(train$Age)
train$child <- 0
train$child[train$Age < 18] <- 1
aggregate(Survived~ child + Sex, data = train,FUN = sum)
aggregate(Survived~ child + Sex, data = train,FUN = length)
aggregate(Survived~ child + Sex, data = train,FUN = function(x) {sum(x)/length(x)})
train$Fare2 <- '30+'
train$Fare2[train$Fare<30 &train$Fare>=20] <- '20-30'
train$Fare2[train$Fare<20 &train$Fare>=10] <- '10-20'
train$Fare2[train$Fare<10] <- '<10'
aggregate(Survived~ Fare2 + Pclass + Sex, data = train,FUN = function(x) {sum(x)/length(x)})
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
submit <- data.frame(PassengerID = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "Somewilldie.csv",row.names = FALSE)
library("rpart")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
plot(fit)
text(fit)
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "myfirstdtree.csv", row.names = FALSE)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class",
control=rpart.control(minsplit=2, cp=0))
fancyRpartPlot(fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class",
control=rpart.control( minsplit=2 ))
new.fit <- prp(fit,snip=TRUE)$obj
fancyRpartPlot(new.fit)
test$Survived <- NA
combi<- rbind(train,test)
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1],split = '[,.]')[[1]][2]
combi$Title <- sapply(combi$Name, FUN = function(x) {strsplit(x,split = '[,.]')[[1]][2]})
combi$Title <- sub(' ','',combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
train <- combi[1:891,]
test <- combi[892:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data=train,
method="class")
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "mydtree.csv", row.names = FALSE)
Agefit <- rpart(Age ~ Pclass + Sex + Sibsp + Parch + Fare + Embarked + Title + FamilySize,
data = combi[!is.na(combi$Age),], method = "anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
Agefit <- rpart(Age ~ Pclass + Sex + Sibsp + Parch + Fare + Embarked + Title + FamilySize,
data = combi[!is.na(combi$Age),], method = "anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
Agefit <- rpart(Age ~ Pclass + Sex + Sibsp + Parch + Fare + Embarked + Title + FamilySize,
data = combi[!is.na(combi$Age),], method = "anova")
combi<- rbind(train,test)
test$Survived <- NA
combi<- rbind(train,test)
train <- read.csv("C:/Users/akash/Downloads/Kaggle/Titanic Disaster Problem/train.csv")
test <- read.csv("C:/Users/akash/Downloads/Kaggle/Titanic Disaster Problem/test.csv")
test$Survived <- rep(0,418)
test$Survived<-0
test$Survived[test$Sex == 'female'] <- 1
summary(train$Age)
train$child <- 0
train$child[train$Age < 18] <- 1
aggregate(Survived~ child + Sex, data = train,FUN = sum)
aggregate(Survived~ child + Sex, data = train,FUN = length)
aggregate(Survived~ child + Sex, data = train,FUN = function(x) {sum(x)/length(x)})
train$Fare2 <- '30+'
train$Fare2[train$Fare<30 &train$Fare>=20] <- '20-30'
train$Fare2[train$Fare<20 &train$Fare>=10] <- '10-20'
train$Fare2[train$Fare<10] <- '<10'
aggregate(Survived~ Fare2 + Pclass + Sex, data = train,FUN = function(x) {sum(x)/length(x)})
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
library("rpart")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
Prediction <- predict(fit, test, type = "class")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class",
control=rpart.control(minsplit=2, cp=0))
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class",
control=rpart.control( minsplit=2 ))
new.fit <- prp(fit,snip=TRUE)$obj
test$Survived <- NA
combi<- rbind(train,test)
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1],split = '[,.]')[[1]][2]
combi$Title <- sapply(combi$Name, FUN = function(x) {strsplit(x,split = '[,.]')[[1]][2]})
combi$Title <- sub(' ','',combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
train <- combi[1:891,]
test <- combi[892:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data=train,
method="class")
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combi[!is.na(combi$Age),],
method="anova")
combi<- rbind(train,test)
train <- read.csv("C:/Users/akash/Downloads/Kaggle/Titanic Disaster Problem/train.csv")
test <- read.csv("C:/Users/akash/Downloads/Kaggle/Titanic Disaster Problem/test.csv")
test$Survived<-0
test$Survived[test$Sex == 'female'] <- 1
train$child <- 0
train$child[train$Age < 18] <- 1
aggregate(Survived~ child + Sex, data = train,FUN = sum)
aggregate(Survived~ child + Sex, data = train,FUN = length)
aggregate(Survived~ child + Sex, data = train,FUN = function(x) {sum(x)/length(x)})
train$Fare2 <- '30+'
train$Fare2[train$Fare<30 &train$Fare>=20] <- '20-30'
train$Fare2[train$Fare<20 &train$Fare>=10] <- '10-20'
train$Fare2[train$Fare<10] <- '<10'
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
library("rpart")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
Prediction <- predict(fit, test, type = "class")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class",
control=rpart.control(minsplit=2, cp=0))
fancyRpartPlot(fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class",
control=rpart.control( minsplit=2 ))
new.fit <- prp(fit,snip=TRUE)$obj
fancyRpartPlot(new.fit)
test$Survived <- NA
combi<- rbind(train,test)
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1],split = '[,.]')[[1]][2]
combi$Title <- sapply(combi$Name, FUN = function(x) {strsplit(x,split = '[,.]')[[1]][2]})
combi$Title <- sub(' ','',combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
train <- combi[1:891,]
test <- combi[892:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data=train,
method="class")
runs <- 100000
sims <- rnorm(runs, mean = 1, sd=10)
mc.integral <- sum(sims>= 3 & sims<= 6)/runs
mc.integral
runs <- 100000
sims <- rnorm(runs, mean = 1, sd=10)
mc.integral <- sum(sims>= 3 & sims<= 6)/runs
mc.integral
runs <- 100000
sims <- rnorm(runs, mean = 1, sd=10)
mc.integral <- sum(sims>= 3 & sims<= 6)/runs
mc.integral
runs <- 100000
sims <- rnorm(runs, mean = 1, sd=10)
mc.integral <- sum(sims>= 3 & sims<= 6)/runs
mc.integral
runs <- 100000
sims <- rnorm(runs, mean = 1, sd=10)
mc.integral <- sum(sims>= 3 & sims<= 6)/runs
mc.integral
runs <- 100000
sims <- rnorm(runs, mean = 1, sd=10)
mc.integral <- sum(sims>= 3 & sims<= 6)/runs
mc.integral
runs <- 100000
sims <- rnorm(runs, mean = 1, sd=10)
mc.integral <- sum(sims>= 3 & sims<= 6)/runs
mc.integral
runs <- 100000
sims <- rnorm(runs, mean = 1, sd=10)
mc.integral <- sum(sims>= 3 & sims<= 6)/runs
mc.integral
runs <- 100000
sims <- rnorm(runs, mean = 1, sd=10)
mc.integral <- sum(sims>= 3 & sims<= 6)/runs
mc.integral
runs <- 100000
sims <- rnorm(runs,mean=1,sd=10)
mc.integral <- sum(sims >= 3 & sims <= 6)/runs
one.trial <- function(){
sum(sample(c(0,1),10,replace = T)) > 3
}
mc.binom <- replicate(runs,one.trial())/runs
mc.binom
mc.binom <- sum(replicate(runs,one.trial()))/runs
mc.binom
pbinom(3,10,0.5,lower.tail=FALSE)
xs <- runif(runs, min = -0.5, max = 0.5)
ys <- runif(runs, min = -0.5, max = 0.5)
in.circle <- xs^2 + ys^2 <= 0.5^2
mc.pi <- (sum(in.circle)/runs)*4
plot(xs,ys,pch = '.', col = ifelse(in.cirle,"blue", "grey"),xlab = '',ylab='',asp = 1,
main = paste("MC Approximation of pi = ", mc.pi))
mc.pi <- (sum(in.circle)/runs)*4
plot(xs,ys,pch = '.', col = ifelse(in.circle,"blue", "grey"),xlab = '',ylab='',asp = 1,
main = paste("MC Approximation of pi = ", mc.pi))
sasmit<-1:10
sasmit
sasmit<- function(x){}
sasmit<- function(x){
return('I am x ')
}
sasmit('cool')
x<-1:10
y<-x^2
plot(x,y)
boxplot(mpg~cyl, data = mtcars,
main="Car Mileage Data",
xlab="Number of Cylinders",
ylab="Miles Per Gallon")
install.packages("quandl")
install.packages("Quandl")
library(Quandl)
mydata = Quandl.datatable("ZACKS/FC", ticker=c("GOOG"), per_end_date.gt="2015-01-01")
View(mydata)
mydata = Quandl.datatable("ZACKS/FC", ticker="GOOG", paginate=T)
mydata = Quandl.datatable("ZACKS/FC", ticker="AAPL", paginate=T)
View(mydata)
mydata = Quandl.datatable("ZACKS/FC", ticker="AAPL")
library(quantmod)
?getSymbols
getSymbols("GOOG")
View(GOOG)
View(GOOG)
mydata <- getSymbols("GOOG")
mydata <- data.frame(getSymbols("GOOG"))
View(mydata)
View(GOOG)
View(GOOG)
chartSeries(GOOG, subset=’last 3 months’)
chart_Series(GOOG, subset="last 3 months")
chart_Series(GOOG)
GOOG['2015-01-01::2015-12-31']
mydata <- GOOG['2015-01-01::2015-12-31']
View(mydata)
chart_Series(mydata)
mydata_annual <- GOOG['2015-01-01::2015-12-31']
mydata_lastquarter <- GOOG['2015-10-01::2015-12-31']
chart_Series(mydata_lastquarter)
addSAR(accel = c(0.02, 0.2, col = "blue"))
chart_Series(mydata_lastquarter)
addSAR(accel = c(0.02, 0.2, col = "blue"))
chartSeries(mydata_lastquarter, TA="addBBands(n=20)")
addSAR(accel = c(0.02, 0.2, col = "blue"))
chartSeries(mydata_lastquarter, TA=addSAR(accel = c(0.02, 0.2, col = "blue")))
addSAR(accel = c(0.02, 0.2, col = "blue"))
data(mydata_lastquarter)
sar <- SAR(mydata_lastquarter[,c("High","Low")])
chartSeries(mydata_lastquarter, TA="addBBands(n=20)")
mydata_lastquarter <- GOOG['2015-07-01::2015-09-31']
chart_Series(mydata_lastquarter)
chartSeries(mydata_lastquarter, TA="addBBands(n=20)")
data(ttrc)
sar <- SAR(ttrc[,c("High","Low")])
View(ttrc)
sar <- SAR(mydata_lastquarter[,c("High","Low")])
View(mydata_lastquarter)
sar <- SAR(mydata_lastquarter[,c("GOOG.High","GOOG.Low")])
View(sar)
chartSeries(mydata_lastquarter, TA=sar)
chartSeries(mydata_lastquarter, TA="sar")
chartSeries(mydata_lastquarter)
addSAR()
chartSeries(mydata_lastquarter)
addSAR(accel = c(0.02, 0.2, col = "blue"))
addSAR()
chart_Series(mydata_annual)
addSAR()
google_csv <- write.csv(GOOG)
write.csv(GOOG, file = "google_csv.csv")
write.csv(GOOG, file = "google_data.csv")
GOOG <- read.csv("google_data.csv")
View(GOOG)
library(quantmod)
GOOG <- read.csv("google_data.csv")
mydata_lastquarter <- GOOG['2015-07-01::2015-09-31']
GOOG <-as.xts(read.csv("google_data.csv"))
getSymbols("GOOG")
str(GOOG)
getSymbols("GOOG")
GOOG <- as.data.frame(GOOG)
chart_Series(GOOG)
library(quantmod)
getSymbols("GOOG")
mydata_annual <- GOOG['2015-01-01::2015-12-31']
mydata_lastquarter <- GOOG['2015-07-01::2015-09-31']
chart_Series(mydata_annual)
addSAR()
dev.off()
chartSeries(mydata_lastquarter)
addSAR()
source('~/R Files Folder/MiniProject1.R', echo=TRUE)
center <- xts(rowSums(HLC(GOOG)/3, order.by=index(GOOG)))
center <- xts(rowSums(HLC(mydata_lastquarter)/3, order.by=index(GOOG)))
center <- xts(rowSums(HLC(mydata_lastquarter)/3))
View(mydata_lastquarter)
center <- xts(rowSums(HLC(mydata_lastquarter)/3))
center <- xts(rowSums(HLC(GOOG)/3))
mydata_lastquarter$GOOG.High
center <- ((H + L + C)/3))
center <- (H + L + C)/3)
center <- (H + L + C)/3
H <- mydata_lastquarter$GOOG.High
L <- mydata_lastquarter$GOOG.Low
C <- mydata_lastquarter$GOOG.Close
center <- (H + L + C)/3
View(center)
#pivot calculation
H <- mydata_lastquarter$GOOG.High
L <- mydata_lastquarter$GOOG.Low
C <- mydata_lastquarter$GOOG.Close
center <- (H + L + C)/3
R1 <- (2*center) - L
S1 <- (2*center) - H
R2 <- center + (R1 - S1)
S2 <- center - (R1 - S1)
pivots <- cbind(center,R1,R2,S1,S2)
colnames(pivots) <- c('center','R1', 'R2', 'S1', 'S2')
combined_data <- cbind(mydata_lastquarter, pivots)
head(combined_data)
mydata <- cbind(mydata_lastquarter, pivots)
dev.off()
mydata <- cbind(mydata_lastquarter, pivots)
chartSeries(mydata_lastquarter)
addTA(mydata$S1, on=1, col='lightblue')
addTA(mydata$S2, on=1, col='blue')
addTA(mydata$R1, on=1, col='pink')
addTA(mydata$R2, on=1, col='red')
addSAR()
dev.off()
chartSeries(mydata_lastquarter)
addTA(mydata$S1, on=1, col='lightblue')
addTA(mydata$S2, on=1, col='blue')
addTA(mydata$R1, on=1, col='pink')
addTA(mydata$R2, on=1, col='red')
addSAR(col = 'green')
install.packages('DMWR')
install.packages('DMwR')
R.version
install.packages()
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
summary(lm.D90)
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(lm.D9, las = 1)      # Residuals, Fitted, ...
par(opar)
plot(lm.D9, las = 1)      # Residuals, Fitted, ...
dataset<- file.choose()
dataset<- read.csv("C:\\Users\\akash\\OneDrive\\Documents\\R Files Folder\\Data Mining\\Rattle")
dataset<- read.csv("C:/Users/akash/OneDrive/Documents/R Files Folder/Data Mining/Rattle")
heart <- read.csv("~/R Files Folder/Data Mining/Rattle/heart.csv")
View(heart)
rattle()
library(rattle)
rattle()
qnorm(0.1,mean = 21, sd = 5)
install.packages(swirl)
install.packages("swirl")
library(swirl)
swirl()
x<- c(44, NA, 5, NA)
3*x
main()
swirl()
swirl()
install_from_swirl("Statistical Inference")
swirl()
install_from_swirl("Regression Models")
install_from_swirl("Exploratory Data Analysis: The basics of exploring data in R")
install_from_swirl("Exploratory Data Analysis")
swirl()
pnorm(-2.36)
install.packages("pandoc")
setwd("~/R Files Folder/Data Mining/Logistic Regression")
library(aod)
install.packages("aod")
library(Rcpp)
library(ggplot2)
rm(ls())
rm(ls(...))
rm(list = ls())
library(ggplot2)
library(aod)
library(Rcpp)
data <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
View(data)
summary(data)
head(data)
summary(data)
sapply(data, sd)
data <- data.frame(read.csv("http://www.ats.ucla.edu/stat/data/binary.csv"))
head(data)
summary(data)
sapply(data, sd)
dat0 <- data.frame(read.csv("http://www.ats.ucla.edu/stat/data/binary.csv"))
rm(list = ls())
library(ggplot2)
library(aod)
library(Rcpp)
dat0 <- data.frame(read.csv("http://www.ats.ucla.edu/stat/data/binary.csv"))
head(dat0)
summary(dat0)
sapply(dat0, sd)
rm(list = ls())
library(ggplot2)
library(aod)
library(Rcpp)
dat0 <- data.frame(read.csv("http://www.ats.ucla.edu/stat/data/binary.csv"))
head(dat0)
summary(dat0)
sapply(dat0, sd)
table(dat0$admit,dat0$rank)
xtabs(~ admit + rank, data = dat0)
dat0$rank <- as.factor(dat0$rank)
str(dat0$rank)
logit <- glm(admit ~ rank + gre + gpa, data = dat0, family = "binomial")
summary(logit)
confint(logit)
confint.default(logit)
